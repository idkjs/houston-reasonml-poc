// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");

function Make(Enc, Dec) {
  var create = function (port) {
    return {
            port: port,
            observerIncId: {
              contents: 0
            },
            observers: {
              contents: /* [] */0
            }
          };
  };
  var write = function (link, data) {
    var string = Curry._1(Enc.encode, data);
    switch (string.TAG | 0) {
      case /* Str */0 :
          return link.port.write(string._0);
      case /* Arr */1 :
          return link.port.write(string._0);
      case /* Buf */2 :
          return link.port.write(string._0);
      
    }
  };
  var listen = function (link) {
    link.port.on("data", (function (buffer) {
            var data = Curry._1(Dec.decode, buffer);
            return List.iter((function (obs) {
                          return Curry._1(obs.f, data);
                        }), link.observers.contents);
          }));
    
  };
  var subscribe = function (param, f) {
    var observers = param.observers;
    var observerIncId = param.observerIncId;
    var listener_id = observerIncId.contents;
    var listener = {
      id: listener_id,
      f: f
    };
    observers.contents = {
      hd: listener,
      tl: observers.contents
    };
    var unsubscribe = function (param) {
      observers.contents = List.filter(function (l) {
              return l.id !== observerIncId.contents;
            })(observers.contents);
      
    };
    observerIncId.contents = observerIncId.contents + 1 | 0;
    return unsubscribe;
  };
  return {
          create: create,
          write: write,
          subscribe: subscribe,
          listen: listen
        };
}

function encode(s) {
  return {
          TAG: /* Str */0,
          _0: s
        };
}

var partial_arg = {
  encode: encode
};

function decode(prim) {
  return prim.toString();
}

var Dec = {
  decode: decode
};

function create(port) {
  return {
          port: port,
          observerIncId: {
            contents: 0
          },
          observers: {
            contents: /* [] */0
          }
        };
}

function write(link, data) {
  var string = Curry._1(partial_arg.encode, data);
  switch (string.TAG | 0) {
    case /* Str */0 :
        return link.port.write(string._0);
    case /* Arr */1 :
        return link.port.write(string._0);
    case /* Buf */2 :
        return link.port.write(string._0);
    
  }
}

function listen(link) {
  link.port.on("data", (function (buffer) {
          var data = Curry._1(Dec.decode, buffer);
          return List.iter((function (obs) {
                        return Curry._1(obs.f, data);
                      }), link.observers.contents);
        }));
  
}

function subscribe(param, f) {
  var observers = param.observers;
  var observerIncId = param.observerIncId;
  var listener_id = observerIncId.contents;
  var listener = {
    id: listener_id,
    f: f
  };
  observers.contents = {
    hd: listener,
    tl: observers.contents
  };
  var unsubscribe = function (param) {
    observers.contents = List.filter(function (l) {
            return l.id !== observerIncId.contents;
          })(observers.contents);
    
  };
  observerIncId.contents = observerIncId.contents + 1 | 0;
  return unsubscribe;
}

var MockedConnection = {
  create: create,
  write: write,
  subscribe: subscribe,
  listen: listen
};

exports.Make = Make;
exports.MockedConnection = MockedConnection;
/* No side effect */
