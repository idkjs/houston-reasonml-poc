// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Query$HoustonPocReasonml = require("./Query.bs.js");
var State$HoustonPocReasonml = require("../store/reducers/State.bs.js");
var Store$HoustonPocReasonml = require("../store/Store.bs.js");
var Reducer$HoustonPocReasonml = require("../store/reducers/Reducer.bs.js");
var Mutation$HoustonPocReasonml = require("./Mutation.bs.js");
var Connection$HoustonPocReasonml = require("../port/Connection.bs.js");
var Subscription$HoustonPocReasonml = require("./Subscription.bs.js");

function init(pubsub, port) {
  var link = Curry._1(Connection$HoustonPocReasonml.MockedConnection.create, port);
  Curry._1(Connection$HoustonPocReasonml.MockedConnection.listen, link);
  var con_write = Curry._1(Connection$HoustonPocReasonml.MockedConnection.write, link);
  var con_subscribe = Curry._1(Connection$HoustonPocReasonml.MockedConnection.subscribe, link);
  var con = {
    write: con_write,
    subscribe: con_subscribe
  };
  var store = Store$HoustonPocReasonml.create(Reducer$HoustonPocReasonml.reducer, State$HoustonPocReasonml.initialState);
  Store$HoustonPocReasonml.subscribe(store, (function (state) {
          pubsub.publish("STATE", State$HoustonPocReasonml.mapToSchemaState(state));
          
        }));
  var dep = {
    store: store,
    con: con
  };
  return {
          Query: Query$HoustonPocReasonml.resolvers,
          Mutation: Mutation$HoustonPocReasonml.resolvers(dep),
          Subscription: Subscription$HoustonPocReasonml.resolvers(pubsub)
        };
}

exports.init = init;
/* Query-HoustonPocReasonml Not a pure module */
