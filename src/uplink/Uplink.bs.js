// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Store$HoustonPocReasonml = require("../store/Store.bs.js");

function create(dep) {
  return {
          timers: {
            contents: /* [] */0
          },
          store: dep.store,
          con: dep.con
        };
}

function createTimers(param, commands) {
  var con = param.con;
  var store = param.store;
  var aux = function (commands, acc) {
    if (!commands) {
      return /* [] */0;
    }
    var cmd = commands.hd;
    var epoch = acc + cmd.wait | 0;
    return {
            hd: setTimeout((function (param) {
                    var id = cmd.id;
                    Curry._1(con.write, id);
                    return Store$HoustonPocReasonml.dispatch(store, {
                                TAG: /* UplinkSend */1,
                                _0: id
                              });
                  }), epoch),
            tl: {
              hd: setTimeout((function (param) {
                      var id = cmd.id;
                      return Store$HoustonPocReasonml.dispatch(store, {
                                  TAG: /* UplinkTimeout */3,
                                  _0: id
                                });
                    }), epoch + cmd.timeout | 0),
              tl: aux(commands.tl, acc + epoch | 0)
            }
          };
  };
  return aux(commands, 0);
}

function handle(data) {
  console.log(data);
  
}

function start(dep, sequence) {
  var store = dep.store;
  var uplinkState = Store$HoustonPocReasonml.getState(store).uplink;
  if (uplinkState.inProgress) {
    return ;
  } else {
    Store$HoustonPocReasonml.dispatch(store, {
          TAG: /* UplinkStart */0,
          _0: sequence
        });
    dep.timers.contents = createTimers(dep, sequence.commands);
    Curry._1(dep.con.subscribe, handle);
    return ;
  }
}

function stop(param) {
  var store = param.store;
  var timers = param.timers;
  var uplinkState = Store$HoustonPocReasonml.getState(store).uplink;
  if (uplinkState.inProgress) {
    List.iter((function (prim) {
            clearTimeout(prim);
            
          }), timers.contents);
    timers.contents = /* [] */0;
    return Store$HoustonPocReasonml.dispatch(store, /* UplinkStop */0);
  }
  
}

exports.create = create;
exports.start = start;
exports.stop = stop;
/* No side effect */
